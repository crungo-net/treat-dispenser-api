variables:
  DOCKER_AUTH_CONFIG: '{"auths":{"harbor.crungo.net":{"username":"$CI_REGISTRY_USER","password":"$CI_REGISTRY_PASSWORD"}}}'

stages:
  - build
  - deploy

build-and-push:
  stage: build
  image: harbor.crungo.net/docker-proxy/moby/buildkit:latest
  rules:
    - if: '$CI_COMMIT_BRANCH'  # Only run if this is a branch pipeline
      when: always
  tags:
    - home-lab
  before_script:
    - mkdir -p ~/.docker
    - echo '{"auths":{"harbor.crungo.net":{"username":"'"$CI_REGISTRY_USER"'","password":"'"$CI_REGISTRY_PASSWORD"'"}}}' > ~/.docker/config.json
  script: |
    export CACHE_IMAGE=harbor.crungo.net/scout/treat-dispenser-api:buildcache
    export IMAGE=harbor.crungo.net/scout/treat-dispenser-api
    export SHORT_SHA=$(echo "$CI_COMMIT_SHA" | cut -c1-8)
    export CACHE_BUST=$(date +%s)

    if [ -n "$CI_COMMIT_BRANCH" ]; then
      SAFE_REF="$CI_COMMIT_BRANCH"
    elif [ -n "$CI_COMMIT_TAG" ]; then
      SAFE_REF="$CI_COMMIT_TAG"
    else
      SAFE_REF="unknown"
    fi
    SAFE_REF=$(echo "$SAFE_REF" | tr '/' '-')

    echo "Pushing image with tags:"
    echo " - ${IMAGE}:latest"
    echo " - ${IMAGE}:${SHORT_SHA}"
    echo " - ${IMAGE}:${SAFE_REF}"
    echo "Using cache bust value: ${CACHE_BUST}"


    buildctl-daemonless.sh build \
      --frontend=dockerfile.v0 \
      --local context=. \
      --local dockerfile=. \
      --opt build-arg:RUST_TARGET=x86_64-unknown-linux-musl \
      --opt platform=linux/amd64 \
      --import-cache type=registry,ref=${CACHE_IMAGE},ignore-for=src/ \
      --export-cache type=registry,ref=${CACHE_IMAGE},mode=max \
      --opt build-arg:CACHE_BUST=${CACHE_BUST} \
      --output type=image,name=${IMAGE}:latest,push=true \
      --output type=image,name=${IMAGE}:${SHORT_SHA},push=true \
      --output type=image,name=${IMAGE}:${SAFE_REF},push=true \
      --output type=local,dest=./dist \
      --opt target=binary-export

    cp dist/treat-dispenser-api dist/treat-dispenser-api-amd64

  artifacts:
    paths:
      - dist/treat-dispenser-api-amd64
    expire_in: 1 week


# this is a workaround for the fact that cross-compilation with Docker is slow and complex
# and we can use the native Rust toolchain to build for ARM64 directly
build-arm64-binary:
  stage: build
  # for official Docker Hub images, we need to use the 'library' namespace
  image: harbor.crungo.net/docker-proxy/library/rust:1.88
  rules:
    - if: '$CI_COMMIT_BRANCH'  # Only run if this is a branch pipeline
      when: always
  tags:
    - fast
  script:
    # Install cross-compilation toolchain
    - rustup target add aarch64-unknown-linux-musl
    - apt-get update && apt-get install -y musl-tools gcc-aarch64-linux-gnu
    
    # Set up environment for cross compilation
    - export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc
    - export CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc
    
    # Create output directory
    - mkdir -p dist
    
    # Build directly without cross
    - cargo build --release --target aarch64-unknown-linux-musl
    
    # Copy binary to output directory
    - cp target/aarch64-unknown-linux-musl/release/treat-dispenser-api dist/treat-dispenser-api-aarch64
  artifacts:
    paths:
      - dist/treat-dispenser-api-aarch64
    expire_in: 1 week

tag-release:
  stage: deploy
  image: harbor.crungo.net/docker-proxy/library/ubuntu:24.04
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always  # change to manual for human-triggered tagging and release to github
  before_script:
    - apt-get update && apt-get install -y ca-certificates git
  script: |
    set -ex
    TAG="v$(date +%Y%m%d)-$CI_COMMIT_SHORT_SHA"
    git tag "$TAG" "$CI_COMMIT_SHA"
    git push "https://GITLAB_PUSH_USER:${GITLAB_PAT}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "$TAG"
  
fetch-release-artifacts:
  stage: deploy
  image: harbor.crungo.net/docker-proxy/library/ubuntu:24.04
  before_script:
    - apt-get update && apt-get install -y curl unzip
  script:
    - echo "Fetching artifacts for $CI_COMMIT_SHA"
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_PAT" \
        --output dist.zip \
        "https://gitlab.crungo.net/api/v4/projects/${CI_PROJECT_ID}/jobs/artifacts/main/download?job=build-and-push&sha=$CI_COMMIT_SHA"
    - unzip dist.zip -d .
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_PAT" \
        --output dist_arm64.zip \
        "https://gitlab.crungo.net/api/v4/projects/${CI_PROJECT_ID}/jobs/artifacts/main/download?job=build-arm64-binary&sha=$CI_COMMIT_SHA"
    - unzip dist_arm64.zip -d .
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d{8}-[a-f0-9]{8}$/'
  artifacts:
    paths:
      - dist/
  
release-github:
  stage: deploy
  image: harbor.crungo.net/docker-proxy/library/ubuntu:24.04
  rules:
    # Only run on pipelines triggered by a tag a certain release pattern
    - if: '$CI_COMMIT_TAG =~ /^v\d{8}-[a-f0-9]{8}$/'
      when: always
  dependencies:
    - fetch-release-artifacts
  before_script:
    - apt-get update && apt-get install -y gh jq ca-certificates
  script: |
    set -ex
    ls -lh dist/
    TAG="v$(date +%Y%m%d)-$CI_COMMIT_SHORT_SHA"
    RELEASE_NAME="Treat Dispenser API $TAG"

    gh release create "$TAG" \
      dist/treat-dispenser-api-amd64 \
      dist/treat-dispenser-api-aarch64 \
      --repo github.com/crungo-net/treat-dispenser-api \
      --title "$RELEASE_NAME" \
      --notes "Automated release from GitLab CI for commit $CI_COMMIT_SHA on branch $CI_COMMIT_BRANCH."


  variables:
    GITHUB_TOKEN: $GITHUB_TOKEN # from GitLab CI/CD variables